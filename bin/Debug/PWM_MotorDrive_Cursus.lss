
bin\Debug\PWM_MotorDrive_Cursus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .fuse         00000003  00820000  00820000  0000021a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  0000021d  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000055  00000000  00000000  0000023d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000017b  00000000  00000000  00000292  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000fe  00000000  00000000  0000040d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000019b  00000000  00000000  0000050b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  000006a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000f3  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 b8 00 	call	0x170	; 0x170 <main>
  78:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init_Timers>:

#define Links   0
#define Rechts  1

void init_Timers(void)
{
  80:	df 93       	push	r29
  82:	cf 93       	push	r28
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
    //set fast PWM mode aan van timer0
    TCCR0A |= BV(WGM01) | BV(WGM00);
  88:	a4 e4       	ldi	r26, 0x44	; 68
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	e4 e4       	ldi	r30, 0x44	; 68
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 81       	ld	r24, Z
  92:	83 60       	ori	r24, 0x03	; 3
  94:	8c 93       	st	X, r24
    TCCR0B &= ~BV(WGM02);
  96:	a5 e4       	ldi	r26, 0x45	; 69
  98:	b0 e0       	ldi	r27, 0x00	; 0
  9a:	e5 e4       	ldi	r30, 0x45	; 69
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	87 7f       	andi	r24, 0xF7	; 247
  a2:	8c 93       	st	X, r24

    //set Compare Output Mode van COM A
    TCCR0A |= BV(COM0A1)& ~BV(COM0A0);  //set OC0A pin laag op COM match en set OC0A pin hoog bij BOTTOM
  a4:	a4 e4       	ldi	r26, 0x44	; 68
  a6:	b0 e0       	ldi	r27, 0x00	; 0
  a8:	e4 e4       	ldi	r30, 0x44	; 68
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	80 68       	ori	r24, 0x80	; 128
  b0:	8c 93       	st	X, r24


    //set Compare Output Mode van COM B
    TCCR0A |= BV(COM0B1) & ~BV(COM0B0);  //set OC0B pin laag op COM match en set OC0A pin hoog bij BOTTOM
  b2:	a4 e4       	ldi	r26, 0x44	; 68
  b4:	b0 e0       	ldi	r27, 0x00	; 0
  b6:	e4 e4       	ldi	r30, 0x44	; 68
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	80 62       	ori	r24, 0x20	; 32
  be:	8c 93       	st	X, r24



    //set clock snelheid op clk/64
    TCCR0B |= BV(CS01) | BV(CS00);
  c0:	a5 e4       	ldi	r26, 0x45	; 69
  c2:	b0 e0       	ldi	r27, 0x00	; 0
  c4:	e5 e4       	ldi	r30, 0x45	; 69
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	83 60       	ori	r24, 0x03	; 3
  cc:	8c 93       	st	X, r24

    //set standaard COM waarde AKA pulse breedte
    OCR0A = 127; //50% duty cycle
  ce:	e7 e4       	ldi	r30, 0x47	; 71
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	8f e7       	ldi	r24, 0x7F	; 127
  d4:	80 83       	st	Z, r24
    OCR0B = 127;
  d6:	e8 e4       	ldi	r30, 0x48	; 72
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	8f e7       	ldi	r24, 0x7F	; 127
  dc:	80 83       	st	Z, r24


}
  de:	cf 91       	pop	r28
  e0:	df 91       	pop	r29
  e2:	08 95       	ret

000000e4 <SetMotor>:

void SetMotor(char Speed, bool Dir)
{
  e4:	df 93       	push	r29
  e6:	cf 93       	push	r28
  e8:	00 d0       	rcall	.+0      	; 0xea <SetMotor+0x6>
  ea:	cd b7       	in	r28, 0x3d	; 61
  ec:	de b7       	in	r29, 0x3e	; 62
  ee:	89 83       	std	Y+1, r24	; 0x01
  f0:	6a 83       	std	Y+2, r22	; 0x02
    if(Speed)
  f2:	89 81       	ldd	r24, Y+1	; 0x01
  f4:	88 23       	and	r24, r24
  f6:	49 f1       	breq	.+82     	; 0x14a <SetMotor+0x66>
    {
        if(Dir == Rechts)
  f8:	8a 81       	ldd	r24, Y+2	; 0x02
  fa:	88 23       	and	r24, r24
  fc:	99 f0       	breq	.+38     	; 0x124 <SetMotor+0x40>
        {
            OCR0A = Speed;
  fe:	e7 e4       	ldi	r30, 0x47	; 71
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	89 81       	ldd	r24, Y+1	; 0x01
 104:	80 83       	st	Z, r24
            ClearBit(DDRD, PD5);
 106:	aa e2       	ldi	r26, 0x2A	; 42
 108:	b0 e0       	ldi	r27, 0x00	; 0
 10a:	ea e2       	ldi	r30, 0x2A	; 42
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	8f 7d       	andi	r24, 0xDF	; 223
 112:	8c 93       	st	X, r24
            SetBit(DDRD, PD6);
 114:	aa e2       	ldi	r26, 0x2A	; 42
 116:	b0 e0       	ldi	r27, 0x00	; 0
 118:	ea e2       	ldi	r30, 0x2A	; 42
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	80 64       	ori	r24, 0x40	; 64
 120:	8c 93       	st	X, r24
 122:	21 c0       	rjmp	.+66     	; 0x166 <SetMotor+0x82>

        }
        else
        {
            OCR0B = Speed;
 124:	e8 e4       	ldi	r30, 0x48	; 72
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	89 81       	ldd	r24, Y+1	; 0x01
 12a:	80 83       	st	Z, r24
            ClearBit(DDRD, PD6);
 12c:	aa e2       	ldi	r26, 0x2A	; 42
 12e:	b0 e0       	ldi	r27, 0x00	; 0
 130:	ea e2       	ldi	r30, 0x2A	; 42
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	8f 7b       	andi	r24, 0xBF	; 191
 138:	8c 93       	st	X, r24
            SetBit(DDRD, PD5);
 13a:	aa e2       	ldi	r26, 0x2A	; 42
 13c:	b0 e0       	ldi	r27, 0x00	; 0
 13e:	ea e2       	ldi	r30, 0x2A	; 42
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	80 62       	ori	r24, 0x20	; 32
 146:	8c 93       	st	X, r24
 148:	0e c0       	rjmp	.+28     	; 0x166 <SetMotor+0x82>
        }
    }
    else
    {
        ClearBit(DDRD, PD6); ///D6
 14a:	aa e2       	ldi	r26, 0x2A	; 42
 14c:	b0 e0       	ldi	r27, 0x00	; 0
 14e:	ea e2       	ldi	r30, 0x2A	; 42
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	8f 7b       	andi	r24, 0xBF	; 191
 156:	8c 93       	st	X, r24
        ClearBit(DDRD, PD5); ///D5
 158:	aa e2       	ldi	r26, 0x2A	; 42
 15a:	b0 e0       	ldi	r27, 0x00	; 0
 15c:	ea e2       	ldi	r30, 0x2A	; 42
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	8f 7d       	andi	r24, 0xDF	; 223
 164:	8c 93       	st	X, r24
    }



}
 166:	0f 90       	pop	r0
 168:	0f 90       	pop	r0
 16a:	cf 91       	pop	r28
 16c:	df 91       	pop	r29
 16e:	08 95       	ret

00000170 <main>:


int main(void)
{
 170:	df 93       	push	r29
 172:	cf 93       	push	r28
 174:	cd b7       	in	r28, 0x3d	; 61
 176:	de b7       	in	r29, 0x3e	; 62

    init_Timers();
 178:	0e 94 40 00 	call	0x80	; 0x80 <init_Timers>

    //stuur nog geen PWM uit
    ClearBit(DDRD, PD6); ///D6
 17c:	aa e2       	ldi	r26, 0x2A	; 42
 17e:	b0 e0       	ldi	r27, 0x00	; 0
 180:	ea e2       	ldi	r30, 0x2A	; 42
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	8f 7b       	andi	r24, 0xBF	; 191
 188:	8c 93       	st	X, r24
    ClearBit(DDRD, PD5); ///D5
 18a:	aa e2       	ldi	r26, 0x2A	; 42
 18c:	b0 e0       	ldi	r27, 0x00	; 0
 18e:	ea e2       	ldi	r30, 0x2A	; 42
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	8f 7d       	andi	r24, 0xDF	; 223
 196:	8c 93       	st	X, r24



    while(1)
    {
        SetMotor(100,Rechts);
 198:	84 e6       	ldi	r24, 0x64	; 100
 19a:	61 e0       	ldi	r22, 0x01	; 1
 19c:	0e 94 72 00 	call	0xe4	; 0xe4 <SetMotor>
 1a0:	fb cf       	rjmp	.-10     	; 0x198 <main+0x28>

000001a2 <_exit>:
 1a2:	f8 94       	cli

000001a4 <__stop_program>:
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <__stop_program>
